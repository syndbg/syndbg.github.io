<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to my mindspace on Anton Antonov's mindspace</title><link>https://syndbg.github.io/</link><description>Recent content in Welcome to my mindspace on Anton Antonov's mindspace</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://syndbg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Practically, Go 1.25's Container-Aware GOMAXPROCS: What You Need to Know</title><link>https://syndbg.github.io/posts/2025-01-13-go-1-25/</link><pubDate>Mon, 13 Jan 2025 03:00:00 +0000</pubDate><guid>https://syndbg.github.io/posts/2025-01-13-go-1-25/</guid><description>&lt;p>Go 1.25 just dropped with expected changes to GOMAXPROCS, which significantly change how Go applications behave in containerized environments. The runtime now &lt;strong>automatically detects and respects container CPU limits&lt;/strong> when setting &lt;code>GOMAXPROCS&lt;/code>. This isn&amp;rsquo;t just a minor improvement—it&amp;rsquo;s a shift that &lt;strong>may&lt;/strong> dramatically improve performance for millions of containerized Go applications.&lt;/p>
&lt;p>And this isn&amp;rsquo;t the only amazing change, but this is the one I&amp;rsquo;ll focus on in this post.&lt;/p>
&lt;h2 id="the-problem-that-plagued-go-for-years">The Problem That Plagued Go for Years&lt;/h2>
&lt;p>Before Go 1.25, there was a fundamental mismatch between Go&amp;rsquo;s runtime and containerized environments:&lt;/p></description></item><item><title>About</title><link>https://syndbg.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://syndbg.github.io/about/</guid><description>&lt;h1 id="-hi-im-anton">👋 Hi, I&amp;rsquo;m Anton&lt;/h1>
&lt;p>🏷️ &lt;strong>Engineering Manager &amp;amp; Principal Software Engineer&lt;/strong> of Least Surprise Software, or so I like to think when it&amp;rsquo;s about Developer Experience&lt;/p>
&lt;h2 id="-about-me">🚀 About Me&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Go Practitioner&lt;/strong> for many years - Building high-performant distributed systems with Go, sometimes with RAFT consensus too.&lt;/li>
&lt;li>&lt;strong>Kubernetes Practitioner&lt;/strong> — Focused on modern cluster ops, multi-cloud, and security (cert-manager &amp;amp; PKI automation).&lt;/li>
&lt;li>&lt;strong>Developer Experience &amp;amp; Platform Engineering&lt;/strong> focused. I&amp;rsquo;ve built a few closed-source systems and open-sourced a few elements of them over the years.&lt;/li>
&lt;li>&lt;strong>DevOps &amp;amp; Tooling&lt;/strong> — Author of goenv, taskporter, and contributor to open-source workflow and security utilities for the Go and DevOps communities.&lt;/li>
&lt;/ul>
&lt;h2 id="-skills--tools">🛠️ Skills &amp;amp; Tools&lt;/h2>
&lt;p>By preference, solving problems with &lt;strong>Go&lt;/strong>, &lt;strong>CockroachDB&lt;/strong>, &lt;strong>Redis&lt;/strong>, &lt;strong>Terraform&lt;/strong>, and your favorite cloud or multi-cloud deployment environment.&lt;/p></description></item></channel></rss>